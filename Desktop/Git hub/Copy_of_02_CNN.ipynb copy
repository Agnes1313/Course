{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    },
    "colab": {
      "name": "Copy of 02 CNN.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "e4f8bb8b55ea438ba306ed99f058d105": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "state": {
            "_view_name": "VBoxView",
            "_dom_classes": [
              "widget-interact"
            ],
            "_model_name": "VBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_bf5697b3157b4a92a9629d2ee6470042",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_a69b007aae634af399f577d150c37a3b",
              "IPY_MODEL_fa46c7306eac4587aa6fc2de8eec8f22",
              "IPY_MODEL_35c03ade4d314e05b6c378c93aaf5903"
            ]
          }
        },
        "bf5697b3157b4a92a9629d2ee6470042": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a69b007aae634af399f577d150c37a3b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntSliderModel",
          "state": {
            "_view_name": "IntSliderView",
            "style": "IPY_MODEL_c80ff3adaa3d4f0595580bde3edc8f4f",
            "_dom_classes": [],
            "description": "n",
            "step": 1,
            "_model_name": "IntSliderModel",
            "orientation": "horizontal",
            "max": 9999,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 3985,
            "_view_count": null,
            "disabled": false,
            "_view_module_version": "1.5.0",
            "min": 0,
            "continuous_update": true,
            "readout_format": "d",
            "description_tooltip": null,
            "readout": true,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_0e45562ce0d1407c8d33b7539efbeab1"
          }
        },
        "fa46c7306eac4587aa6fc2de8eec8f22": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "state": {
            "_view_name": "ButtonView",
            "style": "IPY_MODEL_861123af2382491ca20d242e34df5f26",
            "_dom_classes": [],
            "description": "Run Interact",
            "_model_name": "ButtonModel",
            "button_style": "",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "tooltip": "",
            "_view_count": null,
            "disabled": false,
            "_view_module_version": "1.5.0",
            "layout": "IPY_MODEL_72715e92c2f3464cb5aaf23b12d7fd30",
            "_model_module": "@jupyter-widgets/controls",
            "icon": ""
          }
        },
        "35c03ade4d314e05b6c378c93aaf5903": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "state": {
            "_view_name": "OutputView",
            "msg_id": "",
            "_dom_classes": [],
            "_model_name": "OutputModel",
            "outputs": [
              {
                "output_type": "stream",
                "metadata": {
                  "tags": []
                },
                "text": "我可愛的 CNN 預測是 4\n",
                "stream": "stdout"
              },
              {
                "output_type": "display_data",
                "metadata": {
                  "tags": [],
                  "needs_background": "light"
                },
                "image/png": "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\n",
                "text/plain": "<Figure size 432x288 with 1 Axes>"
              }
            ],
            "_view_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_view_count": null,
            "_view_module_version": "1.0.0",
            "layout": "IPY_MODEL_dee3566c43d44b16a862d6287e1e524b",
            "_model_module": "@jupyter-widgets/output"
          }
        },
        "c80ff3adaa3d4f0595580bde3edc8f4f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "state": {
            "_view_name": "StyleView",
            "handle_color": null,
            "_model_name": "SliderStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "0e45562ce0d1407c8d33b7539efbeab1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "861123af2382491ca20d242e34df5f26": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ButtonStyleModel",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "button_color": null,
            "font_weight": "",
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "72715e92c2f3464cb5aaf23b12d7fd30": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "dee3566c43d44b16a862d6287e1e524b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "iUL0UAVg9exs"
      },
      "source": [
        "%matplotlib inline\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QyaIJAJX9exw"
      },
      "source": [
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D\n",
        "from tensorflow.keras.layers import Dense, Flatten\n",
        "from tensorflow.keras.optimizers import SGD"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zrec_MAb9exy"
      },
      "source": [
        "### 1. 讀入 MNSIT 數據集"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Rg2FEv6R9exz"
      },
      "source": [
        "from tensorflow.keras.datasets import mnist"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5npObmnV9ex1",
        "outputId": "342321bf-7e21-431a-8ac7-3bd896f38f2d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "(x_train, y_train), (x_test, y_test) = mnist.load_data()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11493376/11490434 [==============================] - 0s 0us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SZXigP1h9ex3"
      },
      "source": [
        "### 2. 資料整理"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lsfwIfd99ex4"
      },
      "source": [
        "### Channel\n",
        "\n",
        "CNN 要注意一張圖有多少個 channel, 開始我們因為只有灰階, 所以只有一個 channel。因此我們要轉一下我們的資料格式:\n",
        "\n",
        "    (28,28) --> (28, 28, 1)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1ppxL0ax9ex4"
      },
      "source": [
        "x_train = x_train.reshape(60000, 28, 28, 1) / 255"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WL4l9wEU9ex6"
      },
      "source": [
        "x_test = x_test.reshape(10000, 28, 28, 1) / 255"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cV5o3TYB9ex9"
      },
      "source": [
        "y_train = to_categorical(y_train, 10)\n",
        "y_test = to_categorical(y_test, 10)"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cBio3xxB9eyA"
      },
      "source": [
        "### 3. step 1: 打造函數學習機 (CNN)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OPGY71oP9eyB"
      },
      "source": [
        "model = Sequential()"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XI002d2c9eyD"
      },
      "source": [
        "model.add(Conv2D(16, (3,3), padding='same',\n",
        "                input_shape=(28,28,1),\n",
        "                activation='relu'))"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QbKx69H59eyF"
      },
      "source": [
        "model.add(MaxPooling2D(pool_size=(2,2)))"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "29llOBpA9eyH"
      },
      "source": [
        "model.add(Conv2D(32, (3,3), padding='same',\n",
        "                activation='relu'))"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "953EllVf9eyJ"
      },
      "source": [
        "model.add(MaxPooling2D(pool_size=(2,2)))"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jbPKRnGV9eyL"
      },
      "source": [
        "model.add(Conv2D(64, (3,3), padding='same',\n",
        "                activation='relu'))"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zb4ZPi_M9eyN"
      },
      "source": [
        "model.add(MaxPooling2D(pool_size=(2,2)))"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wnUaJJRl9eyP"
      },
      "source": [
        "model.add(Flatten())"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0jDV_-Bx9eyS"
      },
      "source": [
        "model.add(Dense(54, activation='relu'))"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VOY2xLln9eyU"
      },
      "source": [
        "model.add(Dense(10, activation='softmax'))"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V9PpS3rn9eyW"
      },
      "source": [
        "#### 看一下我們的神經網路"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AWDIxtob9eyX",
        "outputId": "e0b8f61f-5f28-47b9-d9e4-52620f9f6b06",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d (Conv2D)              (None, 28, 28, 16)        160       \n",
            "_________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D) (None, 14, 14, 16)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_1 (Conv2D)            (None, 14, 14, 32)        4640      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 7, 7, 32)          0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 7, 7, 64)          18496     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 3, 3, 64)          0         \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 576)               0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 54)                31158     \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 10)                550       \n",
            "=================================================================\n",
            "Total params: 55,004\n",
            "Trainable params: 55,004\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hbLyt45x9eya"
      },
      "source": [
        "#### 組裝"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HD6tHQk89eya"
      },
      "source": [
        "model.compile(loss='mse', optimizer=SGD(lr=0.087),\n",
        "             metrics=['accuracy'])"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "15kaxsKK9eyc"
      },
      "source": [
        "### 4. step 2: fit"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "KyIQvZTc9eyd",
        "outputId": "90acbbdf-9490-455e-adc9-ff7741744aa7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "model.fit(x_train, y_train, batch_size=128, epochs=12)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/12\n",
            "469/469 [==============================] - 4s 8ms/step - loss: 0.0897 - accuracy: 0.1344\n",
            "Epoch 2/12\n",
            "469/469 [==============================] - 3s 7ms/step - loss: 0.0888 - accuracy: 0.2761\n",
            "Epoch 3/12\n",
            "469/469 [==============================] - 3s 7ms/step - loss: 0.0864 - accuracy: 0.3307\n",
            "Epoch 4/12\n",
            "469/469 [==============================] - 3s 7ms/step - loss: 0.0653 - accuracy: 0.5491\n",
            "Epoch 5/12\n",
            "469/469 [==============================] - 3s 7ms/step - loss: 0.0252 - accuracy: 0.8438\n",
            "Epoch 6/12\n",
            "469/469 [==============================] - 3s 7ms/step - loss: 0.0142 - accuracy: 0.9120\n",
            "Epoch 7/12\n",
            "469/469 [==============================] - 3s 7ms/step - loss: 0.0106 - accuracy: 0.9332\n",
            "Epoch 8/12\n",
            "469/469 [==============================] - 3s 7ms/step - loss: 0.0088 - accuracy: 0.9448\n",
            "Epoch 9/12\n",
            "469/469 [==============================] - 3s 7ms/step - loss: 0.0075 - accuracy: 0.9519\n",
            "Epoch 10/12\n",
            "469/469 [==============================] - 3s 7ms/step - loss: 0.0068 - accuracy: 0.9571\n",
            "Epoch 11/12\n",
            "469/469 [==============================] - 3s 7ms/step - loss: 0.0062 - accuracy: 0.9600\n",
            "Epoch 12/12\n",
            "469/469 [==============================] - 3s 7ms/step - loss: 0.0057 - accuracy: 0.9635\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7fe780300828>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0rg6uWll9eyf"
      },
      "source": [
        "### Step 3. 預測"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dSORr6e_9eyg",
        "outputId": "7aca3912-c918-41dd-e1c7-2b1ca4cbc13c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "result = model.predict_classes(x_test)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From <ipython-input-21-63af5bb2f9b6>:1: Sequential.predict_classes (from tensorflow.python.keras.engine.sequential) is deprecated and will be removed after 2021-01-01.\n",
            "Instructions for updating:\n",
            "Please use instead:* `np.argmax(model.predict(x), axis=-1)`,   if your model does multi-class classification   (e.g. if it uses a `softmax` last-layer activation).* `(model.predict(x) > 0.5).astype(\"int32\")`,   if your model does binary classification   (e.g. if it uses a `sigmoid` last-layer activation).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xaFLErD69eyi"
      },
      "source": [
        "### 看看測試資料表現如何"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RJZoegWW9eyi",
        "outputId": "206d7037-23cd-484c-bc35-c9b9ea3a1496",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "loss, acc = model.evaluate(x_test, y_test)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "313/313 [==============================] - 1s 3ms/step - loss: 0.0052 - accuracy: 0.9689\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p3NFUC1H9eyl",
        "outputId": "06a461bc-e717-4813-aff5-1dcdfeb35daf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(f'測試資料的正確率為 {acc*100:.2f}%')"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "測試資料的正確率為 96.89%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "thEjxHOG9eyp"
      },
      "source": [
        "def my_predict(n):\n",
        "    print('我可愛的 CNN 預測是', result[n])\n",
        "    X = x_test[n].reshape(28,28)\n",
        "    plt.imshow(X, cmap='Greys')"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iNuuQlzk9eyr"
      },
      "source": [
        "from ipywidgets import interact_manual"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XElV0QyR9eyu",
        "outputId": "a9199927-167c-403b-b51b-bb849ca92706",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 346,
          "referenced_widgets": [
            "e4f8bb8b55ea438ba306ed99f058d105",
            "bf5697b3157b4a92a9629d2ee6470042",
            "a69b007aae634af399f577d150c37a3b",
            "fa46c7306eac4587aa6fc2de8eec8f22",
            "35c03ade4d314e05b6c378c93aaf5903",
            "c80ff3adaa3d4f0595580bde3edc8f4f",
            "0e45562ce0d1407c8d33b7539efbeab1",
            "861123af2382491ca20d242e34df5f26",
            "72715e92c2f3464cb5aaf23b12d7fd30",
            "dee3566c43d44b16a862d6287e1e524b"
          ]
        }
      },
      "source": [
        "interact_manual(my_predict, n=(0, 9999));"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "e4f8bb8b55ea438ba306ed99f058d105",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "interactive(children=(IntSlider(value=4999, description='n', max=9999), Button(description='Run Interact', sty…"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qi9u8X-29eyw"
      },
      "source": [
        "### 把我們的 model 存起來"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cA5xWf6x9eyw"
      },
      "source": [
        "model.save('myCNNmodel.h5')"
      ],
      "execution_count": 27,
      "outputs": []
    }
  ]
}